library(caret)
# 2) 의사결정 나무 만들기
library(tree)
# 4) 예측하기 & 모델 평가
library(e1071)
library(rpart)
#깔끔한 플랏 : party, tree는 불가
library(rattle) # Fancy tree plot
#3. party 패키지
library(party)
install.packages('tree')
install.packages('e1071')
install.packages("e1071")
# 4) 예측하기 & 모델 평가
library(e1071)
install.packages("rpart")
install.packages("rpart")
install.packages("rattle")
install.packages("party")
install.packages("RevoTreeView")
install.packages("randomForest")
library(cvTools)
library(foreach)
install.packages("cvTools")
library(plyr)
##=========================================================================
## 01. H2O 설치: http://learn.h2o.ai/content/tutorials/ensembles-stacking/
##=========================================================================
# 1. 기존 H2O 제거
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages('pkg') }
}
install.packages('pkg')
library(h2oEnsemble)  # This will load the `h2o` R package as well
library(h2o)
install.packages('h2o')
library(h2oEnsemble)  # This will load the `h2o` R package as well
install.packages('h2oEnsemble')
library(cvAUC)
install.packages('cvAUC')
# 1) 데이터 준비
df<-iris
library(caret)
set.seed(0329) #reproducability setting
intrain<-createDataPartition(y=df$Species, p=0.7, list=FALSE)
train<-df[intrain, ]
test<-df[-intrain, ]
# 2) 의사결정 나무 만들기
library(tree)
treemod<-tree(Species~. , data=train)
treemod
plot(treemod)
text(treemod)
cv.trees<-cv.tree(treemod, FUN=prune.misclass )  # misclass : 교차검증 오분류율 기준
plot(cv.trees)
prune.trees <- prune.misclass(treemod, best=3)
plot(prune.trees)
text(prune.trees)
# 4) 예측하기 & 모델 평가
library(e1071)
treepred <- predict(prune.trees, test, type='class')
confusionMatrix(treepred, test$Species)
library(rpart)
rpartmod<-rpart(Species~. , data=train, method="class")
plot(rpartmod)
text(rpartmod)
#깔끔한 플랏 : party, tree는 불가
library(rattle) # Fancy tree plot
treemod<-tree(Species~. , data=train)
treemod
plot(treemod)
text(treemod)
cv.trees<-cv.tree(treemod, FUN=prune.misclass )  # misclass : 교차검증 오분류율 기준
plot(cv.trees)
cv.trees<-cv.tree(treemod, FUN=prune.misclass )  # misclass : 교차검증 오분류율 기준
plot(cv.trees)
prune.trees <- prune.misclass(treemod, best=3)
plot(prune.trees)
text(prune.trees)
treepred <- predict(prune.trees, test, type='class')
confusionMatrix(treepred, test$Species)
rpartmod<-rpart(Species~. , data=train, method="class")
plot(rpartmod)
text(rpartmod)
fancyRpartPlot(rpartmod)
class(rpartmod)
# 가지치기 : tree패키지 cv.tree와 유사한 함수 사용
printcp(rpartmod) # cross-validation 계산 함수
plotcp(rpartmod)
ptree<-prune(rpartmod, cp= rpartmod$cptable[which.min(rpartmod$cptable[,"xerror"]),"CP"]) #complexity parameter
plot(ptree)
text(ptree)
#3. party 패키지
library(party)
partymod<-ctree(Species~., data=train)
plot(partymod)
# 이렇게도 표현 가능.
plot(partymod, inner_panel = node_barplot,
edge_panel = function(...) invisible(), tnex = 1)
partypred<-predict(partymod, test)
confusionMatrix(partypred, test$Species)
##### tree 시각화 참고 : revoTreeView
df<-read.csv('http://www-bcf.usc.edu/~gareth/ISL/Heart.csv')
df<-read.csv('Heart.csv')
df<-read.csv('cs-training.csv')
##### tree 시각화 참고 : revoTreeView
df<-read.csv('http://www-bcf.usc.edu/~gareth/ISL/Heart.csv')
#df<-read.csv('Heart.csv')
treemod<-rpart(AHD~. , data=df)
library(RevoTreeView)
install.packages('RevoTreeView')
#df<-read.csv('Heart.csv')
treemod<-rpart(AHD~. , data=df)
#모델
library(randomForest)
m <- randomForest(Species ~ ., data = iris)
m
predict(m, newdata = iris)
m <- randomForest(iris[, 1:4], iris[, 5])
m
m <- randomForest(Species ~ ., data = iris, importance = TRUE)
importance(m)
varImpPlot(m)
grid <- expand.grid(ntree = c(10, 100, 200), mrty = c(3, 4))
grid
set.seed(0329)
K = 10
R = 3
cv <- cvFolds(NROW(iris), K = K, R = R)
library(cvTools)
library(foreach)
cv <- cvFolds(NROW(iris), K = K, R = R)
#가능한 조합만들기
grid <- expand.grid(ntree = c(10, 100, 200), mtry = c(3, 4))
grid
result <- foreach(g = 1:NROW(grid), .combine = rbind) %do% {
foreach(r = 1:R, .combine = rbind) %do% {
foreach(k = 1:K, .combine = rbind) %do% {
validation_idx <- cv$subsets[which(cv$which == k), r]
train <- iris[-validation_idx, ]
validation <- iris[validation_idx, ]
# training
m <- randomForest(Species ~ ., data = train, ntree = grid[g, "ntree"],
mtry = grid[g, "mtry"])
# prediction
predicted <- predict(m, newdata = validation)
# estimating performance
precision <- sum(predicted == validation$Species)/NROW(predicted)
return(data.frame(g = g, precision = precision))
}
}
}
result
library(plyr)
total<-ddply(result, .(g), summarize, mean_precision = mean(precision))
arrange(total,-mean_precision)
grid[c(1,3,5), ]
##=========================================================================
## 01. H2O 설치: http://learn.h2o.ai/content/tutorials/ensembles-stacking/
##=========================================================================
# 1. 기존 H2O 제거
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# 2. H2O 의존성 설치
pkgs <- c("methods","statmod","stats","graphics","RCurl","jsonlite","tools","utils")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages('pkg') }
}
# 3. H2O 설치
install.packages("h2o", repos=(c("http://s3.amazonaws.com/h2o-release/h2o/master/1497/R", getOption("repos"))))
# 4. h2o-ensemble 팩키지 설치
#library(devtools)
#install_github("h2oai/h2o-3/h2o-r/ensemble/h2oEnsemble-package")
install.packages("https://h2o-release.s3.amazonaws.com/h2o-ensemble/R/h2oEnsemble_0.1.8.tar.gz", repos = NULL)
library(h2o)
library(h2oEnsemble)  # This will load the `h2o` R package as well
h2o.init(nthreads = -1, ip = 'localhost', port = 54321, max_mem_size = '8g')  # H2O 클러스터를 최대 코어수에 맞춰 생성
h2o.init(nthreads = -1, ip = 'localhost', port = 54321, max_mem_size = '12g')  # H2O 클러스터를 최대 코어수에 맞춰 생성
